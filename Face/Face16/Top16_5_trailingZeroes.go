package main

// 设计一个算法，算出 n 阶乘有多少个尾随零。

// 示例 1:

// 输入: 3
// 输出: 0
// 解释: 3! = 6, 尾数中没有零。
// 经过分析发现如果想要得到0，则在相乘的过程中必须出现5或5的倍数，经分析发现

// 25以下，5的倍数出现的次数，就是对应数阶乘得到结果0的个数
// 25-125 5的倍数出现的次数、25倍数出现的次数（*2），相加就是对应数得到结果为0的个数，相当于两个5
// 125-625 5/25/125 出现的次数，最基础的都是5 出现的次数，在某一范围里，对应数可以等效为多少个5

func trailingZeroes(n int) (cout int) {
	// 从5开始，反复乘5递增，得到对应数，除5到5^n 对应数 出现的5的次数，最后相加得到即可
	for tm := 5; tm <= n; {
		cout += n / tm
		tm *= 5
	}
	return
}
