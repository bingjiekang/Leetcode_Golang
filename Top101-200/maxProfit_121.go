package main

/*
要求:给定一个数组 prices ，它的第 i 个元素 prices[i] 表示一支给定股票第 i 天的价格。你只能选择 某一天 买入这只股票，并选择在 未来的某一个不同的日子 卖出该股票。设计一个算法来计算你所能获取的最大利润。返回你可以从这笔交易中获取的最大利润。如果你不能获取任何利润，返回 0 。
*/
/*
思路
找最大的利润，从前往后找到一个相对小的数，后面每个大于他的数和他的差都是利润，找出利润较大值。后面每个小于他的数字，重新赋值成较小的数（因为如果后面出现更大的数，则他个这个更小数的差肯定比之前较小数的差更大，即利润更大），如果后面出现大数和这个较小数的利润差大于之前的利润，那就重新赋值最大利润值，如果后面没有出现利润差大于之前的利润，那么证明前面的利润差就是最大的。
*/
func maxProfit(prices []int) int {
	// 最小值
	min_num := 10001
	// 最大的利润
	max_profit := 0
	// 获取长度便于便利
	length := len(prices)
	for i := 0; i < length; i++ {
		// 如果当前数小于最小的数 则赋值给最小的数
		if prices[i] < min_num {
			min_num = prices[i]
		} else {
			// 如果当前的利润大于最大的利润 则赋值给最大的数
			if max_profit < prices[i]-min_num {
				max_profit = prices[i] - min_num
			}
		}
	}
	return max_profit
}
